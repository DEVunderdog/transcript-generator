// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: encryption_key.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countEncryptionKeys = `-- name: CountEncryptionKeys :one
select count(*) from encryption_keys
`

func (q *Queries) CountEncryptionKeys(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countEncryptionKeys)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createEncryptionKeys = `-- name: CreateEncryptionKeys :one
insert into encryption_keys (
    public_key,
    private_key,
    is_active,
    purpose
) values (
    $1, $2, $3, $4
) returning id, public_key, private_key, is_active, purpose, created_at, updated_at
`

type CreateEncryptionKeysParams struct {
	PublicKey  string      `json:"public_key"`
	PrivateKey []byte      `json:"private_key"`
	IsActive   pgtype.Bool `json:"is_active"`
	Purpose    string      `json:"purpose"`
}

func (q *Queries) CreateEncryptionKeys(ctx context.Context, arg CreateEncryptionKeysParams) (EncryptionKey, error) {
	row := q.db.QueryRow(ctx, createEncryptionKeys,
		arg.PublicKey,
		arg.PrivateKey,
		arg.IsActive,
		arg.Purpose,
	)
	var i EncryptionKey
	err := row.Scan(
		&i.ID,
		&i.PublicKey,
		&i.PrivateKey,
		&i.IsActive,
		&i.Purpose,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getActiveKeyBasedOnPurpose = `-- name: GetActiveKeyBasedOnPurpose :one
select id, public_key, private_key, created_at from encryption_keys
where is_active = 'true' and purpose = $1
`

type GetActiveKeyBasedOnPurposeRow struct {
	ID         int32              `json:"id"`
	PublicKey  string             `json:"public_key"`
	PrivateKey []byte             `json:"private_key"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetActiveKeyBasedOnPurpose(ctx context.Context, purpose string) (GetActiveKeyBasedOnPurposeRow, error) {
	row := q.db.QueryRow(ctx, getActiveKeyBasedOnPurpose, purpose)
	var i GetActiveKeyBasedOnPurposeRow
	err := row.Scan(
		&i.ID,
		&i.PublicKey,
		&i.PrivateKey,
		&i.CreatedAt,
	)
	return i, err
}

const updateKeyStatus = `-- name: UpdateKeyStatus :exec
update encryption_keys
set
    is_active = coalesce($1, is_active),
    updated_at = current_timestamp
where
    id = $2
returning id, public_key, private_key, is_active, purpose, created_at, updated_at
`

type UpdateKeyStatusParams struct {
	IsActive pgtype.Bool `json:"is_active"`
	ID       int32       `json:"id"`
}

func (q *Queries) UpdateKeyStatus(ctx context.Context, arg UpdateKeyStatusParams) error {
	_, err := q.db.Exec(ctx, updateKeyStatus, arg.IsActive, arg.ID)
	return err
}
