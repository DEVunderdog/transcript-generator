// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: file_registry.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmptyFile = `-- name: CreateEmptyFile :one
insert into file_registry (
    user_id,
    file_name,
    lock_status,
    upload_status
) values (
    $1, $2, $3, $4
) returning id, user_id, file_name, object_key, lock_status, upload_status, created_at, updated_at
`

type CreateEmptyFileParams struct {
	UserID       int32  `json:"user_id"`
	FileName     string `json:"file_name"`
	LockStatus   bool   `json:"lock_status"`
	UploadStatus string `json:"upload_status"`
}

func (q *Queries) CreateEmptyFile(ctx context.Context, arg CreateEmptyFileParams) (FileRegistry, error) {
	row := q.db.QueryRow(ctx, createEmptyFile,
		arg.UserID,
		arg.FileName,
		arg.LockStatus,
		arg.UploadStatus,
	)
	var i FileRegistry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FileName,
		&i.ObjectKey,
		&i.LockStatus,
		&i.UploadStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFile = `-- name: DeleteFile :exec
delete from file_registry
where id = $1 and user_id = $2
`

type DeleteFileParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeleteFile(ctx context.Context, arg DeleteFileParams) error {
	_, err := q.db.Exec(ctx, deleteFile, arg.ID, arg.UserID)
	return err
}

const getFileByID = `-- name: GetFileByID :one
select upload_status, lock_status, updated_at
from file_registry
where id = $1 and user_id = $2
for update
`

type GetFileByIDParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

type GetFileByIDRow struct {
	UploadStatus string             `json:"upload_status"`
	LockStatus   bool               `json:"lock_status"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetFileByID(ctx context.Context, arg GetFileByIDParams) (GetFileByIDRow, error) {
	row := q.db.QueryRow(ctx, getFileByID, arg.ID, arg.UserID)
	var i GetFileByIDRow
	err := row.Scan(&i.UploadStatus, &i.LockStatus, &i.UpdatedAt)
	return i, err
}

const getFileByName = `-- name: GetFileByName :one
select id, user_id, file_name, object_key, lock_status, upload_status, created_at, updated_at from file_registry
where
    file_name = $1
    and user_id = $2
for update
`

type GetFileByNameParams struct {
	FileName string `json:"file_name"`
	UserID   int32  `json:"user_id"`
}

func (q *Queries) GetFileByName(ctx context.Context, arg GetFileByNameParams) (FileRegistry, error) {
	row := q.db.QueryRow(ctx, getFileByName, arg.FileName, arg.UserID)
	var i FileRegistry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FileName,
		&i.ObjectKey,
		&i.LockStatus,
		&i.UploadStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllFiles = `-- name: ListAllFiles :many
select id, file_name from file_registry
where
    user_id = $1
    and
    upload_status = $2
    and
    lock_status = $3
`

type ListAllFilesParams struct {
	UserID       int32  `json:"user_id"`
	UploadStatus string `json:"upload_status"`
	LockStatus   bool   `json:"lock_status"`
}

type ListAllFilesRow struct {
	ID       int32  `json:"id"`
	FileName string `json:"file_name"`
}

func (q *Queries) ListAllFiles(ctx context.Context, arg ListAllFilesParams) ([]ListAllFilesRow, error) {
	rows, err := q.db.Query(ctx, listAllFiles, arg.UserID, arg.UploadStatus, arg.LockStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAllFilesRow{}
	for rows.Next() {
		var i ListAllFilesRow
		if err := rows.Scan(&i.ID, &i.FileName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unlockAndLockFile = `-- name: UnlockAndLockFile :one
update file_registry
set
    upload_status = $1,
    lock_status = $2,
    updated_at = current_timestamp
where id = $3 and user_id = $4
returning id, user_id, file_name, object_key, lock_status, upload_status, created_at, updated_at
`

type UnlockAndLockFileParams struct {
	Status     string `json:"status"`
	LockStatus bool   `json:"lock_status"`
	ID         int32  `json:"id"`
	UserID     int32  `json:"user_id"`
}

func (q *Queries) UnlockAndLockFile(ctx context.Context, arg UnlockAndLockFileParams) (FileRegistry, error) {
	row := q.db.QueryRow(ctx, unlockAndLockFile,
		arg.Status,
		arg.LockStatus,
		arg.ID,
		arg.UserID,
	)
	var i FileRegistry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FileName,
		&i.ObjectKey,
		&i.LockStatus,
		&i.UploadStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateFileMetadata = `-- name: UpdateFileMetadata :one
update file_registry
set
    object_key = $1,
    upload_status = $2,
    lock_status = $3,
    updated_at = current_timestamp
where id = $4 and user_id = $5
returning id, user_id, file_name, object_key, lock_status, upload_status, created_at, updated_at
`

type UpdateFileMetadataParams struct {
	ObjectKey    pgtype.Text `json:"object_key"`
	UploadStatus string      `json:"upload_status"`
	LockStatus   bool        `json:"lock_status"`
	ID           int32       `json:"id"`
	UserID       int32       `json:"user_id"`
}

func (q *Queries) UpdateFileMetadata(ctx context.Context, arg UpdateFileMetadataParams) (FileRegistry, error) {
	row := q.db.QueryRow(ctx, updateFileMetadata,
		arg.ObjectKey,
		arg.UploadStatus,
		arg.LockStatus,
		arg.ID,
		arg.UserID,
	)
	var i FileRegistry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FileName,
		&i.ObjectKey,
		&i.LockStatus,
		&i.UploadStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateFileName = `-- name: UpdateFileName :one
update file_registry
set
    file_name = $1,
    updated_at = current_timestamp
where id = $2 and user_id = $3
returning id, user_id, file_name, object_key, lock_status, upload_status, created_at, updated_at
`

type UpdateFileNameParams struct {
	NewFileName string `json:"new_file_name"`
	ID          int32  `json:"id"`
	UserID      int32  `json:"user_id"`
}

func (q *Queries) UpdateFileName(ctx context.Context, arg UpdateFileNameParams) (FileRegistry, error) {
	row := q.db.QueryRow(ctx, updateFileName, arg.NewFileName, arg.ID, arg.UserID)
	var i FileRegistry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FileName,
		&i.ObjectKey,
		&i.LockStatus,
		&i.UploadStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
